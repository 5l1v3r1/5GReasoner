MODULE main

VAR


------------------- Environment and State variables --------------------
nas_requested_con_establishment	:	boolean;	
nas_requested_con_reestablishment	:	boolean;	
smc_mac_failure	:	boolean;	
reconf_mac_failure	:	boolean;	
ul_transfer_required	:	boolean;	
dl_transfer_mac_failure	:	boolean;	
resume_mac_failure	:	boolean;	
suspend_mac_failure	:	boolean;	
reject_mac_failure	:	boolean;	
release_mac_failure	:	boolean;	
ue_cap_enq_mac_failure	:	boolean;	
reestab_mac_failure	:	boolean;	
ue_rrc_sec_ctx_exist	:	boolean;	
bearer_setup_required	:	boolean;	
paging_timer_expired	:	boolean;	
as_sec_ctx_setup_required	:	boolean;	
rrc_sm_complete_mac_failure	:	boolean;	
dl_info_transfer_required	:	boolean;	
ul_transfer_mac_failure	:	boolean;	
idle_mode_required	:	boolean;	
resume_req_mac_failure	:	boolean;	
rrc_suspend_required	:	boolean;	
resume_complete_mac_failure	:	boolean;	
reconf_complete_mac_failure	:	boolean;	
ue_cap_required	:	boolean;	
reestab_req_mac_failure	:	boolean;	
reestab_complete_mac_failure	:	boolean;	
gnb_rrc_sec_ctx_exist	:	boolean;	
paging_sent	:	boolean;	
bearer_established	:	boolean;	
attacker_inject_message_chanUB	:	boolean	;
attacker_inject_message_chanBU	:	boolean	;

----------------- Sequence numbers -------------------

---------------- state for UE_RRC state machine ----------------

ue_rrc_state	:
{
	ue_rrc_idle,
	ue_rrc_setup_requested,
	ue_rrc_inactive,
	ue_rrc_resume_requested,
	ue_rrc_connected,
	ue_rrc_reestab_requested
};

---------------- state for BS_RRC state machine ----------------

bs_rrc_state	:
{
	gnb_rrc_idle,
	gnb_rrc_inactive,
	gnb_rrc_wait_for_setup_req,
	gnb_rrc_wait_for_resume_req,
	gnb_rrc_connected,
	gnb_rrc_wait_for_setup_complete,
	gnb_rrc_wait_for_reconf_complete,
	gnb_rrc_wait_for_resume_complete,
	gnb_rrc_wait_for_reestab_complete
};
------------ Possible UE_RRC actions ----------------

ue_rrc_action	:
{
	rrc_setup_req,
	rrc_setup_complete,
	null_action,
	rrc_sm_complete,
	rrc_sm_failure,
	rrc_reconf_complete,
	rrc_reestab_req,
	rrc_reestab_complete,
	ul_info_transfer,
	ue_cap_info,
	rrc_resume_req,
	rrc_resume_complete
};
------------ Possible BS_RRC actions ----------------

bs_rrc_action	:
{
	rrc_setup,
	paging_tmsi,
	null_action,
	rrc_release_suspend,
	rrc_sm_command,
	rrc_reconf,
	dl_info_transfer,
	ue_cap_enquiry,
	rrc_reestab,
	rrc_release,
	rrc_resume,
	rrc_reject,
	paging_irnti
};

--------------- Adversarial channel from UE_RRC to BS_RRC ---------------

chan_UB	:
{
	chanUB_rrc_setup_req,
	chanUB_rrc_setup_complete,
	chanUB_null_action,
	chanUB_rrc_sm_complete,
	chanUB_rrc_sm_failure,
	chanUB_rrc_reconf_complete,
	chanUB_rrc_reestab_req,
	chanUB_rrc_reestab_complete,
	chanUB_ul_info_transfer,
	chanUB_ue_cap_info,
	chanUB_rrc_resume_req,
	chanUB_rrc_resume_complete
};

--------------- Adversarial channel from BS_RRC to UE_RRC ---------------

chan_BU	:
{
	chanBU_rrc_setup,
	chanBU_paging_tmsi,
	chanBU_null_action,
	chanBU_rrc_release_suspend,
	chanBU_rrc_sm_command,
	chanBU_rrc_reconf,
	chanBU_dl_info_transfer,
	chanBU_ue_cap_enquiry,
	chanBU_rrc_reestab,
	chanBU_rrc_release,
	chanBU_rrc_resume,
	chanBU_rrc_reject,
	chanBU_paging_irnti
};

--------------- Injective adversary action for channel chan_UB ---------------

inj_adv_act_UB	:
{
	adv_UB_rrc_setup_req,
	adv_UB_rrc_setup_complete,
	adv_UB_null_action,
	adv_UB_rrc_sm_complete,
	adv_UB_rrc_sm_failure,
	adv_UB_rrc_reconf_complete,
	adv_UB_rrc_reestab_req,
	adv_UB_rrc_reestab_complete,
	adv_UB_ul_info_transfer,
	adv_UB_ue_cap_info,
	adv_UB_rrc_resume_req,
	adv_UB_rrc_resume_complete
};

--------------- Injective adversary action for channel chan_BU ---------------

inj_adv_act_BU	:
{
	adv_BU_rrc_setup,
	adv_BU_paging_tmsi,
	adv_BU_null_action,
	adv_BU_rrc_release_suspend,
	adv_BU_rrc_sm_command,
	adv_BU_rrc_reconf,
	adv_BU_dl_info_transfer,
	adv_BU_ue_cap_enquiry,
	adv_BU_rrc_reestab,
	adv_BU_rrc_release,
	adv_BU_rrc_resume,
	adv_BU_rrc_reject,
	adv_BU_paging_irnti
};


DEFINE

-----------------UE_RRC transitions --------------------
UE_RRC_T1	:=	 (ue_rrc_state = ue_rrc_idle & (nas_requested_con_establishment | chan_BU=chanBU_paging_tmsi) )	;
UE_RRC_T2	:=	 (ue_rrc_state = ue_rrc_setup_requested & chan_BU=chanBU_rrc_release )	;
UE_RRC_T3	:=	 (ue_rrc_state = ue_rrc_setup_requested & chan_BU=chanBU_rrc_reject )	;
UE_RRC_T4	:=	 (ue_rrc_state = ue_rrc_setup_requested & chan_BU=chanBU_rrc_setup)	;
UE_RRC_T5	:=	 (ue_rrc_state = ue_rrc_connected & chan_BU=chanBU_rrc_setup)	;
UE_RRC_T6	:=	 (ue_rrc_state = ue_rrc_connected & chan_BU=chanBU_rrc_release )	;
UE_RRC_T7	:=	 (ue_rrc_state = ue_rrc_connected & chan_BU=chanBU_rrc_reject )	;
UE_RRC_T8	:=	 (ue_rrc_state = ue_rrc_connected & chan_BU=chanBU_rrc_release_suspend & ue_rrc_sec_ctx_exist &    !suspend_mac_failure)	;
UE_RRC_T9	:=	 (ue_rrc_state = ue_rrc_connected & chan_BU=chanBU_rrc_release_suspend )	;
UE_RRC_T10	:=	 (ue_rrc_state = ue_rrc_connected & chan_BU=chanBU_rrc_sm_command & !smc_mac_failure)	;
UE_RRC_T11	:=	 (ue_rrc_state = ue_rrc_connected & chan_BU=chanBU_rrc_sm_command & smc_mac_failure)	;
UE_RRC_T12	:=	 (ue_rrc_state = ue_rrc_connected & chan_BU=chanBU_rrc_reconf &    ue_rrc_sec_ctx_exist & !reconf_mac_failure)	;
UE_RRC_T13	:=	 (ue_rrc_state = ue_rrc_connected & chan_BU=chanBU_rrc_reconf &    ue_rrc_sec_ctx_exist & reconf_mac_failure)	;
UE_RRC_T14	:=	 (ue_rrc_state = ue_rrc_connected & chan_BU=chanBU_rrc_reconf &    !ue_rrc_sec_ctx_exist )	;
UE_RRC_T15	:=	 (ue_rrc_state = ue_rrc_connected & nas_requested_con_reestablishment &    ue_rrc_sec_ctx_exist )	;
UE_RRC_T16	:=	 (ue_rrc_state = ue_rrc_connected & chan_BU=chanBU_rrc_reestab & ue_rrc_sec_ctx_exist    & !reestab_mac_failure)	;
UE_RRC_T17	:=	 (ue_rrc_state = ue_rrc_connected & chan_BU=chanBU_rrc_reestab & ue_rrc_sec_ctx_exist &    reestab_mac_failure)	;
UE_RRC_T18	:=	 (ue_rrc_state = ue_rrc_connected & ul_transfer_required )	;
UE_RRC_T19	:=	 (ue_rrc_state = ue_rrc_connected & chan_BU=chanBU_dl_info_transfer & dl_transfer_mac_failure)	;
UE_RRC_T20	:=	 (ue_rrc_state = ue_rrc_connected & chan_BU=chanBU_dl_info_transfer &  dl_transfer_mac_failure    )	;
UE_RRC_T21	:=	 (ue_rrc_state = ue_rrc_connected & chan_BU=chanBU_ue_cap_enquiry & !ue_rrc_sec_ctx_exist    )	;
UE_RRC_T22	:=	 (ue_rrc_state = ue_rrc_connected & chan_BU=chanBU_ue_cap_enquiry & ue_rrc_sec_ctx_exist &    !ue_cap_enq_mac_failure )	;
UE_RRC_T23	:=	 (ue_rrc_state = ue_rrc_inactive & nas_requested_con_reestablishment )	;
UE_RRC_T24	:=	 (ue_rrc_state = ue_rrc_inactive & (nas_requested_con_establishment | chan_BU=chanBU_paging_irnti) )	;
UE_RRC_T25	:=	 (ue_rrc_state = ue_rrc_inactive & chan_BU=chanBU_rrc_resume & !resume_mac_failure )	;
UE_RRC_T26	:=	 (ue_rrc_state = ue_rrc_inactive & chan_BU=chanBU_rrc_resume & resume_mac_failure )	;
UE_RRC_T27	:=	 (ue_rrc_state = ue_rrc_inactive & chan_BU=chanBU_rrc_setup )	;
UE_RRC_T28	:=	 (ue_rrc_state = ue_rrc_inactive & chan_BU=chanBU_rrc_release & !ue_rrc_sec_ctx_exist )	;
UE_RRC_T29	:=	 (ue_rrc_state = ue_rrc_inactive & chan_BU=chanBU_rrc_release & ue_rrc_sec_ctx_exist & !release_mac_failure )	;
UE_RRC_T30	:=	 (ue_rrc_state = ue_rrc_inactive & chan_BU=chanBU_rrc_reject & !ue_rrc_sec_ctx_exist )	;
UE_RRC_T31	:=	 (ue_rrc_state = ue_rrc_inactive & chan_BU=chanBU_rrc_reject & ue_rrc_sec_ctx_exist & !reject_mac_failure )	;
UE_RRC_T32	:=	 (ue_rrc_state = ue_rrc_resume_requested & chan_BU=chanBU_rrc_resume & !resume_mac_failure )	;
UE_RRC_T33	:=	 (ue_rrc_state = ue_rrc_resume_requested & chan_BU=chanBU_rrc_resume & resume_mac_failure )	;
UE_RRC_T34	:=	 (ue_rrc_state = ue_rrc_resume_requested & chan_BU=chanBU_rrc_setup )	;
UE_RRC_T35	:=	 (ue_rrc_state = ue_rrc_resume_requested & chan_BU=chanBU_rrc_release & !ue_rrc_sec_ctx_exist )	;
UE_RRC_T36	:=	 (ue_rrc_state = ue_rrc_resume_requested & chan_BU=chanBU_rrc_release & ue_rrc_sec_ctx_exist & !release_mac_failure )	;
UE_RRC_T37	:=	 (ue_rrc_state = ue_rrc_resume_requested & chan_BU=chanBU_rrc_reject & !ue_rrc_sec_ctx_exist )	;
UE_RRC_T38	:=	 (ue_rrc_state = ue_rrc_resume_requested & chan_BU=chanBU_rrc_reject & ue_rrc_sec_ctx_exist & !reject_mac_failure )	;
UE_RRC_T39	:=	 (ue_rrc_state = ue_rrc_resume_requested & chan_BU=chanBU_rrc_release_suspend & !suspend_mac_failure)	;
UE_RRC_T40	:=	 (ue_rrc_state = ue_rrc_reestab_requested & chan_BU=chanBU_rrc_reestab & !reestab_mac_failure )	;
UE_RRC_T41	:=	 (ue_rrc_state = ue_rrc_reestab_requested & chan_BU=chanBU_rrc_reestab & reestab_mac_failure )	;
UE_RRC_T42	:=	 (ue_rrc_state = ue_rrc_reestab_requested & chan_BU=chanBU_rrc_setup )	;
UE_RRC_T43	:=	 (ue_rrc_state = ue_rrc_reestab_requested & chan_BU=chanBU_rrc_release & !ue_rrc_sec_ctx_exist )	;
UE_RRC_T44	:=	 (ue_rrc_state = ue_rrc_reestab_requested & chan_BU=chanBU_rrc_release & ue_rrc_sec_ctx_exist & !release_mac_failure )	;
UE_RRC_T45	:=	 (ue_rrc_state = ue_rrc_reestab_requested & chan_BU=chanBU_rrc_reject & !ue_rrc_sec_ctx_exist )	;
UE_RRC_T46	:=	 (ue_rrc_state = ue_rrc_reestab_requested & chan_BU=chanBU_rrc_reject & ue_rrc_sec_ctx_exist & !reject_mac_failure )	;
UE_RRC_T47	:=	 (ue_rrc_state = ue_rrc_reestab_requested & chan_BU=chanBU_rrc_release_suspend & !suspend_mac_failure)	;

-----------------BS_RRC transitions --------------------
BS_RRC_T1	:=	 (bs_rrc_state = gnb_rrc_idle & chan_UB=chanUB_rrc_setup_req )	;
BS_RRC_T2	:=	 (bs_rrc_state = gnb_rrc_idle & dl_info_transfer_required )	;
BS_RRC_T3	:=	 (bs_rrc_state = gnb_rrc_wait_for_setup_req & paging_sent & paging_timer_expired )	;
BS_RRC_T4	:=	 (bs_rrc_state = gnb_rrc_wait_for_setup_complete & chan_UB=chanUB_rrc_setup_req )	;
BS_RRC_T5	:=	 (bs_rrc_state = gnb_rrc_wait_for_setup_complete & chan_UB=chanUB_rrc_setup_complete )	;
BS_RRC_T6	:=	 (bs_rrc_state = gnb_rrc_connected & chan_UB=chanUB_rrc_setup_req)	;
BS_RRC_T7	:=	 (bs_rrc_state = gnb_rrc_connected & rrc_suspend_required )	;
BS_RRC_T8	:=	 (bs_rrc_state = gnb_rrc_connected & as_sec_ctx_setup_required )	;
BS_RRC_T9	:=	 (bs_rrc_state = gnb_rrc_connected & bearer_setup_required )	;
BS_RRC_T10	:=	 (bs_rrc_state = gnb_rrc_connected & dl_info_transfer_required )	;
BS_RRC_T11	:=	 (bs_rrc_state = gnb_rrc_connected & chan_UB=chanUB_ul_info_transfer & ul_transfer_mac_failure)	;
BS_RRC_T12	:=	 (bs_rrc_state = gnb_rrc_connected & ue_cap_required )	;
BS_RRC_T13	:=	 (bs_rrc_state = gnb_rrc_connected & chan_UB=chanUB_ue_cap_info )	;
BS_RRC_T14	:=	 (bs_rrc_state = gnb_rrc_connected & chan_UB=chanUB_rrc_reestab_req    & gnb_rrc_sec_ctx_exist & !reestab_req_mac_failure )	;
BS_RRC_T15	:=	 (bs_rrc_state = gnb_rrc_connected & chan_UB=chanUB_rrc_reestab_req &    (!gnb_rrc_sec_ctx_exist | reestab_req_mac_failure)  )	;
BS_RRC_T16	:=	 (bs_rrc_state = gnb_rrc_inactive & idle_mode_required)	;
BS_RRC_T17	:=	 (bs_rrc_state = gnb_rrc_inactive & chan_UB=chanUB_rrc_resume_req & (!gnb_rrc_sec_ctx_exist | resume_req_mac_failure) )	;
BS_RRC_T18	:=	 (bs_rrc_state = gnb_rrc_inactive & chan_UB=chanUB_rrc_resume_req & gnb_rrc_sec_ctx_exist & !resume_req_mac_failure )	;
BS_RRC_T19	:=	 (bs_rrc_state = gnb_rrc_inactive & chan_UB=chanUB_rrc_resume_req & gnb_rrc_sec_ctx_exist & resume_req_mac_failure )	;
BS_RRC_T20	:=	 (bs_rrc_state = gnb_rrc_inactive & chan_UB=chanUB_rrc_resume_req & rrc_suspend_required )	;
BS_RRC_T21	:=	 (bs_rrc_state = gnb_rrc_inactive & dl_info_transfer_required )	;
BS_RRC_T22	:=	 (bs_rrc_state = gnb_rrc_wait_for_resume_req & paging_timer_expired )	;
BS_RRC_T23	:=	 (bs_rrc_state = gnb_rrc_wait_for_resume_req & chan_UB=chanUB_rrc_resume_req &    (!gnb_rrc_sec_ctx_exist | resume_req_mac_failure))	;
BS_RRC_T24	:=	 (bs_rrc_state = gnb_rrc_wait_for_resume_req & chan_UB=chanUB_rrc_resume_req &    gnb_rrc_sec_ctx_exist & !resume_req_mac_failure )	;
BS_RRC_T25	:=	 (bs_rrc_state = gnb_rrc_wait_for_resume_req & chan_UB=chanUB_rrc_resume_req &    gnb_rrc_sec_ctx_exist & resume_req_mac_failure )	;
BS_RRC_T26	:=	 (bs_rrc_state = gnb_rrc_wait_for_resume_req & chan_UB=chanUB_rrc_setup_req )	;
BS_RRC_T27	:=	 (bs_rrc_state = gnb_rrc_wait_for_resume_complete & chan_UB=chanUB_rrc_resume_complete &    gnb_rrc_sec_ctx_exist & !resume_complete_mac_failure )	;
BS_RRC_T28	:=	 (bs_rrc_state = gnb_rrc_wait_for_resume_complete & chan_UB=chanUB_rrc_resume_complete &    (!gnb_rrc_sec_ctx_exist | resume_complete_mac_failure) )	;
BS_RRC_T29	:=	 (bs_rrc_state = gnb_rrc_wait_for_reestab_complete & chan_UB=chanUB_rrc_reestab_complete    & gnb_rrc_sec_ctx_exist & !resume_complete_mac_failure )	;
BS_RRC_T30	:=	 (bs_rrc_state = gnb_rrc_wait_for_reestab_complete & chan_UB=chanUB_rrc_reestab_complete &    (!gnb_rrc_sec_ctx_exist | resume_complete_mac_failure) )	;
BS_RRC_T31	:=	 (bs_rrc_state = gnb_rrc_wait_for_reconf_complete & chan_UB=chanUB_rrc_reconf_complete &    !reconf_complete_mac_failure)	;
BS_RRC_T32	:=	 (bs_rrc_state = gnb_rrc_wait_for_reconf_complete & chan_UB=chanUB_rrc_reconf_complete &    (!gnb_rrc_sec_ctx_exist | reconf_complete_mac_failure ) )	;

------------------- Adversary enabled or not --------------------
inj_adv_UB_enabled:=	TRUE;
inj_adv_BU_enabled:=	FALSE;


ASSIGN


------------------- Adversarial state machines --------------------

init(inj_adv_act_UB)	:=
{
	adv_UB_rrc_setup_req,
	adv_UB_rrc_setup_complete,
	adv_UB_null_action,
	adv_UB_rrc_sm_complete,
	adv_UB_rrc_sm_failure,
	adv_UB_rrc_reconf_complete,
	adv_UB_rrc_reestab_req,
	adv_UB_rrc_reestab_complete,
	adv_UB_ul_info_transfer,
	adv_UB_ue_cap_info,
	adv_UB_rrc_resume_req,
	adv_UB_rrc_resume_complete
};

next(inj_adv_act_UB)	:=	case
TRUE	:	{
	adv_UB_rrc_setup_req,
	adv_UB_rrc_setup_complete,
	adv_UB_null_action,
	adv_UB_rrc_sm_complete,
	adv_UB_rrc_sm_failure,
	adv_UB_rrc_reconf_complete,
	adv_UB_rrc_reestab_req,
	adv_UB_rrc_reestab_complete,
	adv_UB_ul_info_transfer,
	adv_UB_ue_cap_info,
	adv_UB_rrc_resume_req,
	adv_UB_rrc_resume_complete
};
esac	;

init(inj_adv_act_BU)	:=
{
	adv_BU_rrc_setup,
	adv_BU_paging_tmsi,
	adv_BU_null_action,
	adv_BU_rrc_release_suspend,
	adv_BU_rrc_sm_command,
	adv_BU_rrc_reconf,
	adv_BU_dl_info_transfer,
	adv_BU_ue_cap_enquiry,
	adv_BU_rrc_reestab,
	adv_BU_rrc_release,
	adv_BU_rrc_resume,
	adv_BU_rrc_reject,
	adv_BU_paging_irnti
};

next(inj_adv_act_BU)	:=	case
TRUE	:	{
	adv_BU_rrc_setup,
	adv_BU_paging_tmsi,
	adv_BU_null_action,
	adv_BU_rrc_release_suspend,
	adv_BU_rrc_sm_command,
	adv_BU_rrc_reconf,
	adv_BU_dl_info_transfer,
	adv_BU_ue_cap_enquiry,
	adv_BU_rrc_reestab,
	adv_BU_rrc_release,
	adv_BU_rrc_resume,
	adv_BU_rrc_reject,
	adv_BU_paging_irnti
};
esac	;


---------------UE_RRC state machine ------------------

init(ue_rrc_state)	:=ue_rrc_idle;

next(ue_rrc_state)	:=	 case

(UE_RRC_T2 | UE_RRC_T3 | UE_RRC_T6 | UE_RRC_T7 | UE_RRC_T14 | UE_RRC_T17 | UE_RRC_T26 | UE_RRC_T28 | UE_RRC_T29 | UE_RRC_T31 | UE_RRC_T33 | UE_RRC_T35 | UE_RRC_T36 | UE_RRC_T37 | UE_RRC_T38 | UE_RRC_T41 | UE_RRC_T43 | UE_RRC_T44 | UE_RRC_T45 | UE_RRC_T46 )	:	ue_rrc_idle	;
(UE_RRC_T1 )	:	ue_rrc_setup_requested	;
(UE_RRC_T8 | UE_RRC_T9 | UE_RRC_T30 | UE_RRC_T39 | UE_RRC_T47 )	:	ue_rrc_inactive	;
(UE_RRC_T24 )	:	ue_rrc_resume_requested	;
(UE_RRC_T4 | UE_RRC_T5 | UE_RRC_T10 | UE_RRC_T11 | UE_RRC_T12 | UE_RRC_T13 | UE_RRC_T15 | UE_RRC_T16 | UE_RRC_T18 | UE_RRC_T19 | UE_RRC_T20 | UE_RRC_T21 | UE_RRC_T22 | UE_RRC_T25 | UE_RRC_T27 | UE_RRC_T32 | UE_RRC_T34 | UE_RRC_T40 | UE_RRC_T42 )	:	ue_rrc_connected	;
(UE_RRC_T23 )	:	ue_rrc_reestab_requested	;
TRUE	:	ue_rrc_state	;
esac	;

---------------BS_RRC state machine ------------------

init(bs_rrc_state)	:=gnb_rrc_idle;

next(bs_rrc_state)	:=	 case

(BS_RRC_T16 | BS_RRC_T19 )	:	gnb_rrc_idle	;
(BS_RRC_T7 | BS_RRC_T17 | BS_RRC_T20 )	:	gnb_rrc_inactive	;
(BS_RRC_T2 | BS_RRC_T3 | BS_RRC_T22 )	:	gnb_rrc_wait_for_setup_req	;
(BS_RRC_T21 )	:	gnb_rrc_wait_for_resume_req	;
(BS_RRC_T5 | BS_RRC_T8 | BS_RRC_T10 | BS_RRC_T11 | BS_RRC_T12 | BS_RRC_T13 | BS_RRC_T27 | BS_RRC_T28 | BS_RRC_T29 | BS_RRC_T30 | BS_RRC_T31 | BS_RRC_T32 )	:	gnb_rrc_connected	;
(BS_RRC_T1 | BS_RRC_T4 | BS_RRC_T6 | BS_RRC_T15 | BS_RRC_T23 | BS_RRC_T25 | BS_RRC_T26 )	:	gnb_rrc_wait_for_setup_complete	;
(BS_RRC_T9 )	:	gnb_rrc_wait_for_reconf_complete	;
(BS_RRC_T18 | BS_RRC_T24 )	:	gnb_rrc_wait_for_resume_complete	;
(BS_RRC_T14 )	:	gnb_rrc_wait_for_reestab_complete	;
TRUE	:	bs_rrc_state	;
esac	;


init(ue_rrc_action)	:= null_action	;

next(ue_rrc_action)	:=	 case

(UE_RRC_T1 )	:	rrc_setup_req	;
(UE_RRC_T4 | UE_RRC_T5 | UE_RRC_T27 | UE_RRC_T34 | UE_RRC_T42 )	:	rrc_setup_complete	;
(UE_RRC_T8 | UE_RRC_T9 | UE_RRC_T19 | UE_RRC_T20 | UE_RRC_T39 | UE_RRC_T47 )	:	null_action	;
(UE_RRC_T10 )	:	rrc_sm_complete	;
(UE_RRC_T11 )	:	rrc_sm_failure	;
(UE_RRC_T12 )	:	rrc_reconf_complete	;
(UE_RRC_T13 | UE_RRC_T15 | UE_RRC_T23 )	:	rrc_reestab_req	;
(UE_RRC_T16 | UE_RRC_T40 )	:	rrc_reestab_complete	;
(UE_RRC_T18 )	:	ul_info_transfer	;
(UE_RRC_T21 | UE_RRC_T22 )	:	ue_cap_info	;
(UE_RRC_T24 )	:	rrc_resume_req	;
(UE_RRC_T25 | UE_RRC_T32 )	:	rrc_resume_complete	;
TRUE	:	 null_action	;
esac	;


init(bs_rrc_action)	:= null_action	;

next(bs_rrc_action)	:=	 case

(BS_RRC_T1 | BS_RRC_T4 | BS_RRC_T6 | BS_RRC_T15 | BS_RRC_T17 | BS_RRC_T23 | BS_RRC_T26 )	:	rrc_setup	;
(BS_RRC_T2 | BS_RRC_T3 )	:	paging_tmsi	;
(BS_RRC_T5 | BS_RRC_T11 | BS_RRC_T13 | BS_RRC_T27 | BS_RRC_T28 | BS_RRC_T29 | BS_RRC_T30 | BS_RRC_T32 )	:	null_action	;
(BS_RRC_T7 | BS_RRC_T20 )	:	rrc_release_suspend	;
(BS_RRC_T8 )	:	rrc_sm_command	;
(BS_RRC_T9 )	:	rrc_reconf	;
(BS_RRC_T10 )	:	dl_info_transfer	;
(BS_RRC_T12 )	:	ue_cap_enquiry	;
(BS_RRC_T14 )	:	rrc_reestab	;
(BS_RRC_T16 )	:	rrc_release	;
(BS_RRC_T18 | BS_RRC_T24 )	:	rrc_resume	;
(BS_RRC_T19 | BS_RRC_T25 )	:	rrc_reject	;
(BS_RRC_T21 | BS_RRC_T22 )	:	paging_irnti	;
TRUE	:	 null_action	;
esac	;

init(chan_UB)	:=	chanUB_null_action;

next(chan_UB)	:=	 case
attacker_inject_message_chanUB	&	inj_adv_UB_enabled	&	inj_adv_act_UB	=	adv_UB_rrc_setup_req	:	chanUB_rrc_setup_req	;
attacker_inject_message_chanUB	&	inj_adv_UB_enabled	&	inj_adv_act_UB	=	adv_UB_rrc_setup_complete	:	chanUB_rrc_setup_complete	;
attacker_inject_message_chanUB	&	inj_adv_UB_enabled	&	inj_adv_act_UB	=	adv_UB_null_action	:	chanUB_null_action	;
attacker_inject_message_chanUB	&	inj_adv_UB_enabled	&	inj_adv_act_UB	=	adv_UB_rrc_sm_complete	:	chanUB_rrc_sm_complete	;
attacker_inject_message_chanUB	&	inj_adv_UB_enabled	&	inj_adv_act_UB	=	adv_UB_rrc_sm_failure	:	chanUB_rrc_sm_failure	;
attacker_inject_message_chanUB	&	inj_adv_UB_enabled	&	inj_adv_act_UB	=	adv_UB_rrc_reconf_complete	:	chanUB_rrc_reconf_complete	;
attacker_inject_message_chanUB	&	inj_adv_UB_enabled	&	inj_adv_act_UB	=	adv_UB_rrc_reestab_req	:	chanUB_rrc_reestab_req	;
attacker_inject_message_chanUB	&	inj_adv_UB_enabled	&	inj_adv_act_UB	=	adv_UB_rrc_reestab_complete	:	chanUB_rrc_reestab_complete	;
attacker_inject_message_chanUB	&	inj_adv_UB_enabled	&	inj_adv_act_UB	=	adv_UB_ul_info_transfer	:	chanUB_ul_info_transfer	;
attacker_inject_message_chanUB	&	inj_adv_UB_enabled	&	inj_adv_act_UB	=	adv_UB_ue_cap_info	:	chanUB_ue_cap_info	;
attacker_inject_message_chanUB	&	inj_adv_UB_enabled	&	inj_adv_act_UB	=	adv_UB_rrc_resume_req	:	chanUB_rrc_resume_req	;
attacker_inject_message_chanUB	&	inj_adv_UB_enabled	&	inj_adv_act_UB	=	adv_UB_rrc_resume_complete	:	chanUB_rrc_resume_complete	;
ue_rrc_action	=	 rrc_setup_req	:	chanUB_rrc_setup_req	;
ue_rrc_action	=	 rrc_setup_complete	:	chanUB_rrc_setup_complete	;
ue_rrc_action	=	 null_action	:	chanUB_null_action	;
ue_rrc_action	=	 rrc_sm_complete	:	chanUB_rrc_sm_complete	;
ue_rrc_action	=	 rrc_sm_failure	:	chanUB_rrc_sm_failure	;
ue_rrc_action	=	 rrc_reconf_complete	:	chanUB_rrc_reconf_complete	;
ue_rrc_action	=	 rrc_reestab_req	:	chanUB_rrc_reestab_req	;
ue_rrc_action	=	 rrc_reestab_complete	:	chanUB_rrc_reestab_complete	;
ue_rrc_action	=	 ul_info_transfer	:	chanUB_ul_info_transfer	;
ue_rrc_action	=	 ue_cap_info	:	chanUB_ue_cap_info	;
ue_rrc_action	=	 rrc_resume_req	:	chanUB_rrc_resume_req	;
ue_rrc_action	=	 rrc_resume_complete	:	chanUB_rrc_resume_complete	;
TRUE	: {chanUB_null_action}	;
esac	;


init(chan_BU)	:=	chanBU_null_action;

next(chan_BU)	:=	 case
attacker_inject_message_chanBU	&	inj_adv_BU_enabled	&	inj_adv_act_BU	=	adv_BU_rrc_setup	:	chanBU_rrc_setup	;
attacker_inject_message_chanBU	&	inj_adv_BU_enabled	&	inj_adv_act_BU	=	adv_BU_paging_tmsi	:	chanBU_paging_tmsi	;
attacker_inject_message_chanBU	&	inj_adv_BU_enabled	&	inj_adv_act_BU	=	adv_BU_null_action	:	chanBU_null_action	;
attacker_inject_message_chanBU	&	inj_adv_BU_enabled	&	inj_adv_act_BU	=	adv_BU_rrc_release_suspend	:	chanBU_rrc_release_suspend	;
attacker_inject_message_chanBU	&	inj_adv_BU_enabled	&	inj_adv_act_BU	=	adv_BU_rrc_sm_command	:	chanBU_rrc_sm_command	;
attacker_inject_message_chanBU	&	inj_adv_BU_enabled	&	inj_adv_act_BU	=	adv_BU_rrc_reconf	:	chanBU_rrc_reconf	;
attacker_inject_message_chanBU	&	inj_adv_BU_enabled	&	inj_adv_act_BU	=	adv_BU_dl_info_transfer	:	chanBU_dl_info_transfer	;
attacker_inject_message_chanBU	&	inj_adv_BU_enabled	&	inj_adv_act_BU	=	adv_BU_ue_cap_enquiry	:	chanBU_ue_cap_enquiry	;
attacker_inject_message_chanBU	&	inj_adv_BU_enabled	&	inj_adv_act_BU	=	adv_BU_rrc_reestab	:	chanBU_rrc_reestab	;
attacker_inject_message_chanBU	&	inj_adv_BU_enabled	&	inj_adv_act_BU	=	adv_BU_rrc_release	:	chanBU_rrc_release	;
attacker_inject_message_chanBU	&	inj_adv_BU_enabled	&	inj_adv_act_BU	=	adv_BU_rrc_resume	:	chanBU_rrc_resume	;
attacker_inject_message_chanBU	&	inj_adv_BU_enabled	&	inj_adv_act_BU	=	adv_BU_rrc_reject	:	chanBU_rrc_reject	;
attacker_inject_message_chanBU	&	inj_adv_BU_enabled	&	inj_adv_act_BU	=	adv_BU_paging_irnti	:	chanBU_paging_irnti	;
bs_rrc_action	=	 rrc_setup	:	chanBU_rrc_setup	;
bs_rrc_action	=	 paging_tmsi	:	chanBU_paging_tmsi	;
bs_rrc_action	=	 null_action	:	chanBU_null_action	;
bs_rrc_action	=	 rrc_release_suspend	:	chanBU_rrc_release_suspend	;
bs_rrc_action	=	 rrc_sm_command	:	chanBU_rrc_sm_command	;
bs_rrc_action	=	 rrc_reconf	:	chanBU_rrc_reconf	;
bs_rrc_action	=	 dl_info_transfer	:	chanBU_dl_info_transfer	;
bs_rrc_action	=	 ue_cap_enquiry	:	chanBU_ue_cap_enquiry	;
bs_rrc_action	=	 rrc_reestab	:	chanBU_rrc_reestab	;
bs_rrc_action	=	 rrc_release	:	chanBU_rrc_release	;
bs_rrc_action	=	 rrc_resume	:	chanBU_rrc_resume	;
bs_rrc_action	=	 rrc_reject	:	chanBU_rrc_reject	;
bs_rrc_action	=	 paging_irnti	:	chanBU_paging_irnti	;
TRUE	: {chanBU_null_action}	;
esac	;


--------------- State Variables state machine ------------------



init(ue_rrc_sec_ctx_exist)	:= FALSE	;

next(ue_rrc_sec_ctx_exist)	:=	 case
(UE_RRC_T10 )	:	TRUE	;
(UE_RRC_T1 | UE_RRC_T2 | UE_RRC_T3 | UE_RRC_T4 | UE_RRC_T6 | UE_RRC_T7 | UE_RRC_T14 | UE_RRC_T17 | UE_RRC_T26 | UE_RRC_T27 | UE_RRC_T28 | UE_RRC_T29 | UE_RRC_T30 | UE_RRC_T31 | UE_RRC_T33 | UE_RRC_T34 | UE_RRC_T35 | UE_RRC_T36 | UE_RRC_T37 | UE_RRC_T38 | UE_RRC_T41 | UE_RRC_T42 | UE_RRC_T43 | UE_RRC_T44 | UE_RRC_T45 | UE_RRC_T46 )	:	FALSE	;
TRUE	:	ue_rrc_sec_ctx_exist	;
esac	;



init(gnb_rrc_sec_ctx_exist)	:= FALSE	;

next(gnb_rrc_sec_ctx_exist)	:=	 case
(BS_RRC_T1 | BS_RRC_T4 | BS_RRC_T6 | BS_RRC_T15 | BS_RRC_T23 | BS_RRC_T26 )	:	FALSE	;
TRUE	:	gnb_rrc_sec_ctx_exist	;
esac	;



init(paging_sent)	:= FALSE	;

next(paging_sent)	:=	 case
(BS_RRC_T2 | BS_RRC_T3 | BS_RRC_T21 | BS_RRC_T22 )	:	TRUE	;
(BS_RRC_T4 | BS_RRC_T6 | BS_RRC_T18 | BS_RRC_T24 | BS_RRC_T25 | BS_RRC_T26 )	:	FALSE	;
TRUE	:	paging_sent	;
esac	;



init(bearer_established)	:= FALSE	;

next(bearer_established)	:=	 case
(BS_RRC_T31 )	:	TRUE	;
TRUE	:	bearer_established	;
esac	;


LTLSPEC
G 	(	
		X (!nas_requested_con_establishment)
		& !dl_info_transfer_required
		& !idle_mode_required
		& !ul_transfer_required
		& !nas_requested_con_reestablishment
		& inj_adv_act_UB != adv_UB_rrc_setup_req
		& inj_adv_act_UB != adv_UB_rrc_resume_req
		& inj_adv_act_UB != adv_UB_rrc_reestab_req
		& inj_adv_act_UB != adv_UB_ul_info_transfer
		& inj_adv_act_UB != adv_UB_ue_cap_info
		-- need to check if any other counter-example needs to be added
	) ->
	--G( (ue_rrc_state = ue_rrc_connected & chan_UB=chanUB_rrc_sm_complete) ->
	--	O((chan_BU!=chanBU_rrc_sm_command) S (as_sec_ctx_setup_required))
	--);
	G( 
		(bs_rrc_state = gnb_rrc_connected & !gnb_rrc_sec_ctx_exist & 
		!bearer_established & bearer_setup_required) 
			->  F(bearer_established S gnb_rrc_sec_ctx_exist)
	);

